from collections import namedtuple as nt
import General_Utils

DataSet = nt('DataSet', [
            'Date',
            'Time',
            'Test_Loop', 
            'Pipe', 
            'Test_Name',
            'Meas_Name',
            'TX_Frequency',
            'TX_Power',
            'TX_BW',
            'RX_Frequency',
            'RX_Wanted_Sig_lvl',
            'RX_Sig_BW_MHz',
            'RX_Channel',
            'Test_Mode',
            'BLER',
            'Spec_Min',
            'Spec_Max',
            'Meas_Result',
            'Unit',
            'Status',
            'Result_Field',
            'Interferer_1_Lvl',
            'Interferer_1_Freq',
            'Interferer_1_Type',
            'Interferer_2_Lvl',
            'Interferer_2_Freq',
            'Interferer_2_Type',
            'Temperature',
            'Test_Model',
            'Num_Of_Carriers',
            'Configuration',
            'RX0_RSSI',
            'RX1_RSSI',
            'RX0_SNR_AVG',
            'RX0_SNR_MIN',
            'RX0_SNR_MAX',
            'RX0_TA_AVG',
            'RX0_TA_MIN',
            'RX0_TA_MAX',
            'Test_Case_38_141',
            ])
# Specs = nt('Specs', ['spec_min', 'spec_max'])

def generate_dataset(loop,pipe,testName,measName,tx_freq,tx_pwr,tx_bw,rx_freq,rx_ws_lvl,rx_bw,rx_channel,test_mode,bler,spec_min,spec_max,res,unit,status=None,res_col=None,is_1_lvl=None,is_1_freq=None,is_1_type=None,is_2_Lvl=None,is_2_freq=None,is_2_type=None,temp=None,tm=None,noc=None,sig_file_name=None,rx0_rssi=None,rx1_rssi=None,rx0_snr_avg=None,rx0_snr_min=None,rx0_snr_max=None,rx0_ta_avg=None,rx0_ta_min=None,rx0_ta_max=None,tc_num=None):
    return DataSet(
        Date = General_Utils.curr_date_mdy(),
        Time = General_Utils.curr_time_ampm(),
        Test_Loop = loop, 
        Pipe = pipe, 
        Test_Name=testName,
        Meas_Name=measName,
        TX_Frequency=tx_freq,
        TX_Power=tx_pwr,
        TX_BW=tx_bw,
        RX_Frequency=rx_freq,
        RX_Wanted_Sig_lvl=rx_ws_lvl,
        RX_Sig_BW_MHz=rx_bw,
        RX_Channel=rx_channel,
        Test_Mode=test_mode,
        BLER=bler,
        Spec_Min=spec_min,
        Spec_Max=spec_max,
        Meas_Result=res,
        Unit=unit,
        Status=status,
        Result_Field = res_col,
        Interferer_1_Lvl=is_1_lvl,
        Interferer_1_Freq=is_1_freq,
        Interferer_1_Type=is_1_type,
        Interferer_2_Lvl=is_2_Lvl,
        Interferer_2_Freq=is_2_freq,
        Interferer_2_Type=is_2_type,
        Temperature=temp,
        Test_Model=tm,
        Num_Of_Carriers=noc,
        Configuration=sig_file_name,
        RX0_RSSI=rx0_rssi,
        RX1_RSSI=rx1_rssi,
        RX0_SNR_AVG=rx0_snr_avg,
        RX0_SNR_MIN=rx0_snr_min,
        RX0_SNR_MAX=rx0_snr_max,
        RX0_TA_AVG=rx0_ta_avg,
        RX0_TA_MIN=rx0_ta_min,
        RX0_TA_MAX=rx0_ta_max,
        Test_Case_38_141=tc_num,
    )

def validate_data(meas_res, spec_min, spec_max):
    if(spec_min != None and meas_res < spec_min): return 'FAIL'
    if(spec_max != None and meas_res > spec_max): return 'FAIL'
    return 'PASS'

if __name__ == '__main__':
    res = generate_dataset(
        loop=1,
        pipe=1,
        testName='Sensitivity',
        measName='BLER',
        tx_freq=3840,
        tx_pwr=37,
        tx_bw=100,
        rx_freq=3840,
        rx_ws_lvl=-77,
        rx_bw=100,
        rx_channel='Middle',
        test_mode='3GPP',
        bler=0.43,
        spec_min=None,
        spec_max=5,
        res=0.35,
        unit='%',
        res_col='BLER'
    )
    print(res)
    # General_Utils.namTupList_to_spreadsheet([res], 'testRx', r'C:\Zulu\Test_Sequence_Data')
    # print(validate_data(6.5, None, 5))